#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä–µ–∑—é–º–µ
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import json
import os
from build_resume import ResumeBuilder


class ResumeEditor:
    def __init__(self, data_file="resume_data.json"):
        self.data_file = data_file
        self.builder = ResumeBuilder(data_file)
        self.data = self.builder.data.copy()

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, "w", encoding="utf-8") as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return False

    def edit_personal_info(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        print("\n=== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===")
        personal = self.data.setdefault("personal_info", {})

        print(f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {personal.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        new_name = input("–ù–æ–≤–æ–µ –∏–º—è (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_name:
            personal["name"] = new_name

        print(f"–¢–µ–∫—É—â–∏–π email: {personal.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        new_email = input("–ù–æ–≤—ã–π email (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_email:
            personal["email"] = new_email

        print(f"–¢–µ–∫—É—â–∏–π Telegram: {personal.get('telegram', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        new_telegram = input("–ù–æ–≤—ã–π Telegram (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_telegram:
            if not new_telegram.startswith("@"):
                new_telegram = "@" + new_telegram
            personal["telegram"] = new_telegram

        print(f"–¢–µ–∫—É—â–∏–π GitHub: {personal.get('github', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        new_github = input("–ù–æ–≤—ã–π GitHub (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_github:
            personal["github"] = new_github

        print(f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {personal.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        new_location = input("–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_location:
            personal["location"] = new_location

    def edit_skills(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤"""
        print("\n=== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ ===")
        skills = self.data.setdefault("skills", {})

        categories = ["languages", "libraries", "tools"]
        category_names = ["–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"]

        for cat, cat_name in zip(categories, category_names):
            print(f"\n{cat_name}:")
            current = skills.get(cat, [])
            print(f"–¢–µ–∫—É—â–∏–µ: {', '.join(current) if current else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}")

            new_skills = input(
                f"–ù–æ–≤—ã–µ {cat_name.lower()} (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): "
            ).strip()
            if new_skills:
                skills[cat] = [
                    skill.strip() for skill in new_skills.split(",") if skill.strip()
                ]

    def add_project(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\n=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ===")

        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
        if not title:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")
            return

        print("–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:")
        print("1. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç")
        print("2. Pet-–ø—Ä–æ–µ–∫—Ç")
        print("3. –•–∞–∫–∞—Ç–æ–Ω")

        type_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-3): ").strip()
        type_map = {"1": "project", "2": "pet_project", "3": "hackathon"}
        project_type = type_map.get(type_choice, "pet_project")

        project = {"type": project_type, "title": title}

        link = input("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if link:
            project["link"] = link

        description = input("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if description:
            project["description"] = description

        tech_stack = input("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
        if tech_stack:
            project["tech_stack"] = [
                tech.strip() for tech in tech_stack.split(",") if tech.strip()
            ]

        date = input("–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ª–µ—Ç–æ 2025'): ").strip()
        if date:
            project["date"] = date

        experience = self.data.setdefault("experience", [])
        experience.append(project)

        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")

    def remove_project(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\n=== –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ===")
        experience = self.data.get("experience", [])

        if not experience:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return

        print("–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:")
        for i, project in enumerate(experience):
            print(
                f"{i+1}. {project.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({project.get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})"
            )

        try:
            choice = int(input("–ù–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): ")) - 1
            if choice == -1:
                return
            if 0 <= choice < len(experience):
                removed = experience.pop(choice)
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{removed.get('title')}' —É–¥–∞–ª–µ–Ω!")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")

    def quick_add_skill(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞"""
        print("\n=== –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ ===")

        print("1. –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("2. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
        print("3. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")

        choice = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (1-3): ").strip()
        category_map = {"1": "languages", "2": "libraries", "3": "tools"}
        category = category_map.get(choice)

        if not category:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è!")
            return

        skill = input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞: ").strip()
        if not skill:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        skills = self.data.setdefault("skills", {})
        category_skills = skills.setdefault(category, [])

        if skill in category_skills:
            print(f"‚ö†Ô∏è  –ù–∞–≤—ã–∫ '{skill}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")
            return

        category_skills.append(skill)
        print(f"‚úÖ –ù–∞–≤—ã–∫ '{skill}' –¥–æ–±–∞–≤–ª–µ–Ω!")

    def preview_and_build(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–±–æ—Ä–∫–∞"""
        print("\n=== –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–±–æ—Ä–∫–∞ ===")

        # –û–±–Ω–æ–≤–ª—è–µ–º builder —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.builder.data = self.data

        print("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        if not self.save_data():
            return

        print("–°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—é–º–µ...")
        self.builder.build()

        choice = input("\n–û—Ç–∫—Ä—ã—Ç—å HTML –≤–µ—Ä—Å–∏—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ? (y/n): ").strip().lower()
        if choice in ["y", "yes", "–¥–∞", "–¥"]:
            try:
                import webbrowser

                html_path = os.path.abspath("build/resume.html")
                webbrowser.open(f"file://{html_path}")
                print("üåê HTML –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")

    def show_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print("\n" + "=" * 50)
        print("üîß –ö–û–ù–°–¢–†–£–ö–¢–û–† –†–ï–ó–Æ–ú–ï")
        print("=" * 50)
        print("1. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        print("2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏")
        print("3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
        print("4. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
        print("5. –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫")
        print("6. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–±–æ—Ä–∫–∞")
        print("7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏")
        print("0. –í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        print("=" * 50)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        print("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–µ–∑—é–º–µ!")

        while True:
            self.show_menu()
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-7): ").strip()

            if choice == "1":
                self.edit_personal_info()
            elif choice == "2":
                self.edit_skills()
            elif choice == "3":
                self.add_project()
            elif choice == "4":
                self.remove_project()
            elif choice == "5":
                self.quick_add_skill()
            elif choice == "6":
                self.preview_and_build()
            elif choice == "7":
                if self.save_data():
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
            elif choice == "0":
                confirm = input("–í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è? (y/n): ").strip().lower()
                if confirm in ["y", "yes", "–¥–∞", "–¥"]:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    editor = ResumeEditor()
    editor.run()


if __name__ == "__main__":
    main()
