#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–µ–∑—é–º–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ HTML –∏ Markdown —Ñ–∞–π–ª—ã –∏–∑ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import json
import os
from datetime import datetime
from pathlib import Path


class ResumeBuilder:
    def __init__(self, data_file="resume_data.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–µ–∑—é–º–µ"""
        self.data_file = data_file
        self.data = self.load_data()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.data_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–∞–π–ª–µ: {e}")
            return {}

    def generate_markdown(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –≤–µ—Ä—Å–∏–∏ —Ä–µ–∑—é–º–µ"""
        md_content = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        personal = self.data.get("personal_info", {})
        md_content.append("---")
        md_content.append("layout: default")
        md_content.append("---")
        md_content.append("")
        md_content.append(f"# {personal.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        md_content.append("")

        if personal.get("email"):
            md_content.append(
                f"üìß Email: [{personal['email']}](mailto:{personal['email']})"
            )
        if personal.get("telegram"):
            md_content.append(
                f"üí¨ Telegram: [{personal['telegram']}](https://t.me/{personal['telegram'].replace('@', '')})"
            )
        if personal.get("github"):
            md_content.append(
                f"üíª GitHub: [{personal['github']}](https://{personal['github']})"
            )
        if personal.get("location"):
            md_content.append(f"üìç {personal['location']}")

        md_content.append("")
        md_content.append("---")
        md_content.append("")

        # –ù–∞–≤—ã–∫–∏
        skills = self.data.get("skills", {})
        if skills:
            md_content.append("## üîß –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏")
            md_content.append("")

            if skills.get("languages"):
                md_content.append(f"**–Ø–∑—ã–∫–∏:** {', '.join(skills['languages'])}")
            if skills.get("libraries"):
                md_content.append(f"**–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏:** {', '.join(skills['libraries'])}")
            if skills.get("tools"):
                md_content.append(f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** {', '.join(skills['tools'])}")

            md_content.append("")
            md_content.append("---")
            md_content.append("")

        # –û–ø—ã—Ç –∏ –ø—Ä–æ–µ–∫—Ç—ã
        experience = self.data.get("experience", [])
        if experience:
            md_content.append("## üíº –û–ø—ã—Ç / –ü—Ä–æ–µ–∫—Ç—ã")
            md_content.append("")

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            projects_by_type = {}
            for project in experience:
                project_type = project.get("type", "–ü—Ä–æ–µ–∫—Ç")
                if project_type not in projects_by_type:
                    projects_by_type[project_type] = []
                projects_by_type[project_type].append(project)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø—Ä–æ–µ–∫—Ç–æ–≤
            for project_type, projects in projects_by_type.items():
                if len(projects) > 1 or project_type != "–ü—Ä–æ–µ–∫—Ç":
                    md_content.append(f"**{project_type}**")
                    md_content.append("")

                for project in projects:
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                    title = project.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    if project.get("link"):
                        md_content.append(f"- **[{title}]({project['link']})**")
                    else:
                        md_content.append(f"- **{title}**")

                    if project.get("description"):
                        md_content.append(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {project['description']}")
                    if project.get("tech_stack"):
                        md_content.append(f"  –°—Ç–µ–∫: {', '.join(project['tech_stack'])}")
                    if project.get("date"):
                        md_content.append(f"  *({project['date']})*")
                    md_content.append("")

            md_content.append("---")
            md_content.append("")

        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        education = self.data.get("education", {})
        if education:
            md_content.append("## üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")

            if isinstance(education, list):
                for edu in education:
                    if edu.get("institution"):
                        md_content.append(f"**{edu['institution']}**")
                    if edu.get("field"):
                        md_content.append(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {edu['field']}")
                    if edu.get("degree"):
                        md_content.append(f"–°—Ç–µ–ø–µ–Ω—å: {edu['degree']}")
                    if edu.get("period"):
                        md_content.append(f"{edu['period']}")
                    md_content.append("")
            else:
                # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                if education.get("institution"):
                    md_content.append(f"**{education['institution']}**")
                if education.get("field"):
                    md_content.append(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {education['field']}")
                if education.get("period"):
                    md_content.append(f"{education['period']}")

            md_content.append("")
            md_content.append("---")
            md_content.append("")

        # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        certificates = self.data.get("certificates", [])
        if certificates:
            md_content.append("## üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫—É—Ä—Å—ã")
            for cert in certificates:
                md_content.append(f"- **{cert}**")
            md_content.append("")

        return "\n".join(md_content)

    def generate_html(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è standalone HTML –≤–µ—Ä—Å–∏–∏ —Ä–µ–∑—é–º–µ"""
        personal = self.data.get("personal_info", {})

        html_content = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{personal.get('name', '–†–µ–∑—é–º–µ')}</title>
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
            background-color: #fdfdfd;
        }}
        h1 {{
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
            margin-bottom: 30px;
        }}
        h2 {{
            color: #34495e;
            margin-top: 40px;
            margin-bottom: 20px;
        }}
        .contact-info {{
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }}
        .contact-info p {{
            margin: 5px 0;
        }}
        .skills {{
            display: grid;
            gap: 15px;
            margin-bottom: 30px;
        }}
        .skill-category {{
            background-color: #f1f2f6;
            padding: 15px;
            border-radius: 6px;
        }}
        .skill-category strong {{
            color: #2f3542;
        }}
        .project {{
            background-color: #ffffff;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .project h3 {{
            margin-top: 0;
            color: #2c3e50;
        }}
        .project h3 a {{
            color: #2c3e50;
            text-decoration: none;
        }}
        .project h3 a:hover {{
            color: #3498db;
            text-decoration: underline;
        }}
        .tech-stack {{
            background-color: #e8f4f8;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 0.9em;
            margin-top: 10px;
        }}
        .date {{
            color: #7f8c8d;
            font-style: italic;
            font-size: 0.9em;
        }}
        a {{
            color: #3498db;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
        .section {{
            margin-bottom: 40px;
        }}
        .emoji {{
            margin-right: 8px;
        }}
        ul {{
            padding-left: 20px;
        }}
        li {{
            margin-bottom: 10px;
        }}
        .generated-info {{
            text-align: center;
            color: #95a5a6;
            font-size: 0.8em;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ecf0f1;
        }}
    </style>
</head>
<body>
    <h1>{personal.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</h1>
    
    <div class="contact-info">"""

        if personal.get("email"):
            html_content += f'\n        <p><span class="emoji">üìß</span>Email: <a href="mailto:{personal["email"]}">{personal["email"]}</a></p>'
        if personal.get("telegram"):
            tg_handle = personal["telegram"].replace("@", "")
            html_content += f'\n        <p><span class="emoji">üí¨</span>Telegram: <a href="https://t.me/{tg_handle}">{personal["telegram"]}</a></p>'
        if personal.get("github"):
            html_content += f'\n        <p><span class="emoji">üíª</span>GitHub: <a href="https://{personal["github"]}">{personal["github"]}</a></p>'
        if personal.get("location"):
            html_content += (
                f'\n        <p><span class="emoji">üìç</span>{personal["location"]}</p>'
            )

        html_content += "\n    </div>"

        # –ù–∞–≤—ã–∫–∏
        skills = self.data.get("skills", {})
        if skills:
            html_content += '\n\n    <div class="section">\n        <h2><span class="emoji">üîß</span>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏</h2>\n        <div class="skills">'

            if skills.get("languages"):
                html_content += f'\n            <div class="skill-category"><strong>–Ø–∑—ã–∫–∏:</strong> {", ".join(skills["languages"])}</div>'
            if skills.get("libraries"):
                html_content += f'\n            <div class="skill-category"><strong>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏:</strong> {", ".join(skills["libraries"])}</div>'
            if skills.get("tools"):
                html_content += f'\n            <div class="skill-category"><strong>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</strong> {", ".join(skills["tools"])}</div>'

            html_content += "\n        </div>\n    </div>"

        # –û–ø—ã—Ç –∏ –ø—Ä–æ–µ–∫—Ç—ã
        experience = self.data.get("experience", [])
        if experience:
            html_content += '\n\n    <div class="section">\n        <h2><span class="emoji">üíº</span>–û–ø—ã—Ç / –ü—Ä–æ–µ–∫—Ç—ã</h2>'

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            projects_by_type = {}
            for project in experience:
                project_type = project.get("type", "–ü—Ä–æ–µ–∫—Ç")
                if project_type not in projects_by_type:
                    projects_by_type[project_type] = []
                projects_by_type[project_type].append(project)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø—Ä–æ–µ–∫—Ç–æ–≤
            for project_type, projects in projects_by_type.items():
                if len(projects) > 1 or project_type != "–ü—Ä–æ–µ–∫—Ç":
                    html_content += (
                        f"\n        <h3><strong>{project_type}</strong></h3>"
                    )

                for project in projects:
                    html_content += '\n        <div class="project">\n            <h3>'

                    # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                    title = project.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    if project.get("link"):
                        html_content += (
                            f'<a href="{project["link"]}" target="_blank">{title}</a>'
                        )
                    else:
                        html_content += title
                    html_content += "</h3>"

                    if project.get("description"):
                        html_content += f'\n            <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {project["description"]}</p>'
                    if project.get("tech_stack"):
                        html_content += f'\n            <div class="tech-stack"><strong>–°—Ç–µ–∫:</strong> {", ".join(project["tech_stack"])}</div>'
                    if project.get("date"):
                        html_content += (
                            f'\n            <p class="date">({project["date"]})</p>'
                        )
                    html_content += "\n        </div>"

            html_content += "\n    </div>"

            html_content += "\n    </div>"

        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        education = self.data.get("education", {})
        if education:
            html_content += '\n\n    <div class="section">\n        <h2><span class="emoji">üéì</span>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h2>\n'

            if isinstance(education, list):
                for edu in education:
                    html_content += '\n        <div class="project">'
                    if edu.get("institution"):
                        html_content += f'\n            <h3>{edu["institution"]}</h3>'
                    if edu.get("field"):
                        html_content += f'\n            <p><strong>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> {edu["field"]}</p>'
                    if edu.get("degree"):
                        html_content += f'\n            <p><strong>–°—Ç–µ–ø–µ–Ω—å:</strong> {edu["degree"]}</p>'
                    if edu.get("period"):
                        html_content += f'\n            <p>{edu["period"]}</p>'
                    html_content += "\n        </div>"
            else:
                # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                html_content += '\n        <div class="project">'
                if education.get("institution"):
                    html_content += f'\n            <h3>{education["institution"]}</h3>'
                if education.get("field"):
                    html_content += f'\n            <p><strong>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> {education["field"]}</p>'
                if education.get("period"):
                    html_content += f'\n            <p>{education["period"]}</p>'
                html_content += "\n        </div>"

            html_content += "\n    </div>"

        # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        certificates = self.data.get("certificates", [])
        if certificates:
            html_content += '\n\n    <div class="section">\n        <h2><span class="emoji">üìú</span>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫—É—Ä—Å—ã</h2>\n        <ul>'
            for cert in certificates:
                html_content += f"\n            <li>{cert}</li>"
            html_content += "\n        </ul>\n    </div>"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        html_content += f'\n\n    <div class="generated-info">\n        Created by Oderiy Yaroslav CV Generator ‚Ä¢ {datetime.now().strftime("%d.%m.%Y")}\n    </div>'

        html_content += "\n</body>\n</html>"

        return html_content

    def build(self, output_dir="build"):
        """–°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π —Ä–µ–∑—é–º–µ"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
        Path(output_dir).mkdir(exist_ok=True)

        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É —Ä–µ–∑—é–º–µ...")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –¥–ª—è GitHub Pages
        try:
            md_content = self.generate_markdown()
            with open("index.md", "w", encoding="utf-8") as f:
                f.write(md_content)
            print("‚úÖ index.md –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è GitHub Pages")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ index.md: {e}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è standalone HTML
        try:
            html_content = self.generate_html()
            html_path = Path(output_dir) / "resume.html"
            with open(html_path, "w", encoding="utf-8") as f:
                f.write(html_content)
            print(f"‚úÖ Standalone HTML —Å–æ–∑–¥–∞–Ω: {html_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML: {e}")

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ favicon
        if os.path.exists("favicon.ico"):
            try:
                import shutil

                shutil.copy2("favicon.ico", Path(output_dir) / "favicon.ico")
                print("‚úÖ favicon.ico —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å favicon.ico: {e}")

        print("\nüéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤: {os.path.abspath(output_dir)}")
        print(
            f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ {os.path.abspath(output_dir)}/resume.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
        print("üìù index.md –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –≤ GitHub Pages")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    builder = ResumeBuilder()

    if not builder.data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª resume_data.json")
        return

    builder.build()


if __name__ == "__main__":
    main()
